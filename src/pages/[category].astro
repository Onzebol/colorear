---
import Layout from '../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';
import ImageThumbnail from 'image-thumbnail';
import Dibujo from '../components/Dibujo.astro';
import Menu from '../components/Menu.astro';

export function getStaticPaths() {
    const svgs = import.meta.glob('/src/svg/**/*.jpg');
    return Object.keys(svgs).map((svg) => {
        return {
            params: { category: path.parse(svg).name }
        };
    });
}

const { category } = Astro.params;
const svgs = import.meta.glob('../svg/**/*.svg');
const keysSvgs = Object.keys(svgs);
const keysCategory = keysSvgs.filter(svg => svg.includes(`/${category}/`));
let options = { width: 200, responseType: 'base64' }
const keys = await Promise.all(
	keysCategory.map(async (svg) => {
		const url = new URL(import.meta.env.DEV ? svg : svg.replace("../","../src/"), import.meta.url)
		const imageBuffer = fs.readFileSync(url) ;
		const thumbnail =  await ImageThumbnail(imageBuffer, options);
		return { name: `${import.meta.env.DEV ? category + '/' : ''}${path.parse(svg).name}`, img: thumbnail };
	})
);
const categoryUppercase = category.toString().replaceAll("-"," ").replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());
const title = `${categoryUppercase} - Selecciona un dibujo para colorear`;
---

<Layout title={title} >
    <Menu onlyBack={true} viewTitle={true} title={title} />
	<div id="container">
		{keys.map(({name, img}) => 
			<Dibujo name={name} img={img} />
		)}
	</div>
	<style>
		#container { 
			display: grid;
			gap: var(--button-gap);
			grid-auto-rows: 9rem;
			grid-template-columns: repeat(auto-fill, minmax(9rem, 1fr));
			padding: 1rem;
			margin-top: calc(var(--button-gap) + var(--button-size));
		}
	</style>
</Layout>
